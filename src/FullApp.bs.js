// Generated by BUCKLESCRIPT VERSION 5.0.3, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Axios = require("axios");
var React = require("react");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");
var Query$ReactHooksTemplate = require("./Query.bs.js");
var Utils$ReactHooksTemplate = require("./utils/Utils.bs.js");
var CountryList__f$ReactHooksTemplate = require("./CountryList__f.bs.js");

function FullApp(Props) {
  var match = React.useReducer((function (state, action) {
          switch (action.tag | 0) {
            case 0 : 
                return /* record */[
                        /* ip */action[0],
                        /* countries */state[/* countries */1]
                      ];
            case 1 : 
                var country = action[0];
                var result;
                var exit = 0;
                var val;
                try {
                  val = List.find((function (i) {
                          return i === country;
                        }), state[/* countries */1]);
                  exit = 1;
                }
                catch (exn){
                  if (exn === Caml_builtin_exceptions.not_found) {
                    result = /* :: */[
                      country,
                      state[/* countries */1]
                    ];
                  } else {
                    throw exn;
                  }
                }
                if (exit === 1) {
                  result = state[/* countries */1];
                }
                return /* record */[
                        /* ip */state[/* ip */0],
                        /* countries */result
                      ];
            case 2 : 
                var country$1 = action[0];
                return /* record */[
                        /* ip */state[/* ip */0],
                        /* countries */List.filter((function (item) {
                                  return item !== country$1;
                                }))(state[/* countries */1])
                      ];
            
          }
        }), /* record */[
        /* ip */undefined,
        /* countries : [] */0
      ]);
  var dispatch = match[1];
  var state = match[0];
  React.useEffect((function () {
          Axios.get("https://api.ipify.org/?format=json").then((function (response) {
                    return Promise.resolve(Curry._1(dispatch, /* SetIpAddress */Block.__(0, [response.data.ip])));
                  })).catch((function (error) {
                  return Promise.resolve((console.log(error), /* () */0));
                }));
          return (function (param) {
                    return /* () */0;
                  });
        }));
  var handleAddCountry = function (country) {
    return Curry._1(dispatch, /* AddCountry */Block.__(1, [country]));
  };
  var handleRemoveCountry = function (country) {
    return Curry._1(dispatch, /* RemoveCountry */Block.__(2, [country]));
  };
  return React.createElement("div", undefined, React.createElement("div", {
                  style: {
                    float: "left",
                    padding: "0 2%",
                    width: "20%"
                  }
                }, React.createElement("div", undefined, Utils$ReactHooksTemplate.infoAboutIpAddress(state[/* ip */0])), React.createElement("div", undefined, React.createElement(CountryList__f$ReactHooksTemplate.make, {
                          onAddCountry: handleAddCountry,
                          selected: state[/* countries */1]
                        }))), React.createElement("div", {
                  style: {
                    float: "left"
                  }
                }, React.createElement(Query$ReactHooksTemplate.make, {
                      ipAddress: state[/* ip */0],
                      selected: state[/* countries */1],
                      onMarkerPress: handleRemoveCountry
                    })));
}

var make = FullApp;

exports.make = make;
/* axios Not a pure module */
